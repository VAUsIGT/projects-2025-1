import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

logging.basicConfig(level=logging.INFO)

bot = Bot(token="")  # —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞
dp = Dispatcher()

stats = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞'.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/play - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    user_stats = stats.get(user_id, {"wins": 0, "losses": 0, "draws": 0})

    await message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üèÜ –ü–æ–±–µ–¥: {user_stats['wins']}\n"
        f"üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user_stats['losses']}\n"
        f"ü§ù –ù–∏—á—å–∏—Ö: {user_stats['draws']}"
    )


@dp.message(Command("play"))
async def cmd_play(message: types.Message):
    builder = InlineKeyboardBuilder()
    buttons = [
        ("–ö–∞–º–µ–Ω—å", "rock"),
        ("–ù–æ–∂–Ω–∏—Ü—ã", "scissors"),
        ("–ë—É–º–∞–≥–∞", "paper")
    ]

    for text, data in buttons:
        builder.button(text=text, callback_data=data)
    builder.adjust(3)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.in_(["rock", "scissors", "paper"]))
async def process_choice(callback: types.CallbackQuery):
    user_choice = callback.data
    bot_choice = random.choice(["rock", "scissors", "paper"])

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    result = determine_winner(user_choice, bot_choice)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_id = callback.from_user.id
    if user_id not in stats:
        stats[user_id] = {"wins": 0, "losses": 0, "draws": 0}

    if result == "win":
        stats[user_id]["wins"] += 1
        result_text = "–¢—ã –ø–æ–±–µ–¥–∏–ª! ÔøΩÔ∏è"
    elif result == "lose":
        stats[user_id]["losses"] += 1
        result_text = "–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª! ü§ñ"
    else:
        stats[user_id]["draws"] += 1
        result_text = "–ù–∏—á—å—è! ü§ù"

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    choices = {
        "rock": "–ö–∞–º–µ–Ω—å ü™®",
        "scissors": "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è",
        "paper": "–ë—É–º–∞–≥–∞ üìú"
    }

    await callback.message.edit_text(
        f"–¢–≤–æ–π –≤—ã–±–æ—Ä: {choices[user_choice]}\n"
        f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {choices[bot_choice]}\n\n"
        f"{result_text}",
        reply_markup=None
    )
    await callback.answer()


def determine_winner(user, bot):
    if user == bot:
        return "draw"

    win_conditions = {
        "rock": "scissors",
        "scissors": "paper",
        "paper": "rock"
    }

    return "win" if win_conditions[user] == bot else "lose"


if __name__ == "__main__":
    dp.run_polling(bot)