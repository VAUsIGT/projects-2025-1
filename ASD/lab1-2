import math
import random
import matplotlib.pyplot as plt
from itertools import combinations
from functools import cmp_to_key


######################
EPS = 1e-9
#ересечение двух прямых, заданных парами точек ( L1: A + t*(B-A), L2: C + u*(D-C) ) иначе none
def line_line_intersection(A, B, C, D):
    Ax, Ay = A
    Bx, By = B
    Cx, Cy = C
    Dx, Dy = D
    denom = (Bx - Ax) * (Dy - Cy) - (By - Ay) * (Dx - Cx)

    if abs(denom) < EPS:
        return None
    t = ((Cx - Ax) * (Dy - Cy) - (Cy - Ay) * (Dx - Cx)) / denom
    return (Ax + t * (Bx - Ax), Ay + t * (By - Ay))
#лежит ли точка P на отрезке AB (учитывая погрешность)
def on_segment(P, A, B):
    # Проверка коллинеарности (площадь треугольника)
    area = abs(A[0]*(B[1]-P[1]) + B[0]*(P[1]-A[1]) + P[0]*(A[1]-B[1]))
    if area > EPS:
        return False
    if (min(A[0], B[0]) - EPS <= P[0] <= max(A[0], B[0]) + EPS and
        min(A[1], B[1]) - EPS <= P[1] <= max(A[1], B[1]) + EPS):
        return True
    return False
#точка пересечения прямой (A,B) с отрезком [C,D] иначе none
def line_segment_intersection(A, B, C, D):
    P = line_line_intersection(A, B, C, D)
    if P is None or not on_segment(P, C, D):
        return None
    return P
#точка пересечения двух отрезков [A,B] и [C,D]
def segment_segment_intersection(A, B, C, D):
    P = line_line_intersection(A, B, C, D)
    if P is None or not (on_segment(P, A, B) and on_segment(P, C, D)):
        return None
    return P
#точки пересечения прямой (A,B) с окружностью с центром O и радиусом r
def line_circle_intersection(A, B, O, r):
    Ax, Ay = A
    Bx, By = B
    Ox, Oy = O
    dx = Bx - Ax
    dy = By - Ay
    a = dx*dx + dy*dy
    b = 2*(dx*(Ax - Ox) + dy*(Ay - Oy))
    c = (Ax - Ox)**2 + (Ay - Oy)**2 - r*r
    disc = b*b - 4*a*c
    if disc < -EPS:
        return []
    elif abs(disc) < EPS:
        t = -b / (2*a)
        return [(Ax + t*dx, Ay + t*dy)]
    else:
        sqrt_disc = math.sqrt(disc)
        t1 = (-b + sqrt_disc) / (2*a)
        t2 = (-b - sqrt_disc) / (2*a)
        return [(Ax + t1*dx, Ay + t1*dy), (Ax + t2*dx, Ay + t2*dy)]

#точки пересечения отрезка [A,B] с окружностью с центром O и радиусом r
def segment_circle_intersection(A, B, O, r):
    pts = line_circle_intersection(A, B, O, r)
    return [P for P in pts if on_segment(P, A, B)]

#точки пересечения окружностей
def circle_circle_intersection(O1, r1, O2, r2):
    Ox1, Oy1 = O1; Ox2, Oy2 = O2
    d = math.hypot(Ox2 - Ox1, Oy2 - Oy1)
    if d > r1 + r2 + EPS or d < abs(r1 - r2) - EPS or d < EPS:
        return []
    a = (r1*r1 - r2*r2 + d*d) / (2*d)
    h = math.sqrt(max(r1*r1 - a*a, 0))

    Px = Ox1 + a*(Ox2 - Ox1) / d
    Py = Oy1 + a*(Oy2 - Oy1) / d
    if abs(h) < EPS:
        return [(Px, Py)]
    rx = -h * (Oy2 - Oy1) / d
    ry = h * (Ox2 - Ox1) / d
    return [(Px + rx, Py + ry), (Px - rx, Py - ry)]
################################

# Функция для вычисления векторного произведения
def cross_product(o, a, b):
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])

# Проверка, все ли точки коллинеарны
def are_all_collinear(points):
    if len(points) < 3:
        return True
    p0, p1 = points[0], points[1]
    for p in points[2:]:
        if cross_product(p0, p1, p) != 0:
            return False
    return True

# Алгоритм Грэхема для построения выпуклой оболочки
def convex_hull(points):
    points = list(set(points))
    if len(points) < 3:
        return []
    min_point = min(points, key=lambda p: (p[1], p[0]))
    def compare(p1, p2):
        cp = cross_product(min_point, p1, p2)
        if cp == 0:
            d1 = (p1[0] - min_point[0])**2 + (p1[1] - min_point[1])**2
            d2 = (p2[0] - min_point[0])**2 + (p2[1] - min_point[1])**2
            return d1 - d2
        return -cp
    sorted_points = sorted(points, key=cmp_to_key(compare))
    hull = []
    for p in sorted_points:
        while len(hull) >= 2 and cross_product(hull[-2], hull[-1], p) <= 0:
            hull.pop()
        hull.append(p)
    return hull if len(hull) >= 3 else []

# Проверка, лежит ли точка внутри треугольника
def is_point_inside(p, A, B, C):
    def area(a, b, c):
        return abs((a[0]*(b[1]-c[1]) + b[0]*(c[1]-a[1]) + c[0]*(a[1]-b[1])) / 2.0)
    area_total = area(A, B, C)
    area1 = area(p, A, B)
    area2 = area(p, B, C)
    area3 = area(p, C, A)
    return abs(area_total - (area1 + area2 + area3)) < 1e-5

# Генерация случайных точек
def generate_random_points(n, x_range=(0, 100), y_range=(0, 100)):
    return [(random.randint(x_range[0], x_range[1]), random.randint(y_range[0], y_range[1])) for _ in range(n)]

# Визуализация выпуклой оболочки
def plot_convex_hull(points, hull):
    plt.figure()
    x = [p[0] for p in points]
    y = [p[1] for p in points]
    plt.scatter(x, y, color='blue')  # Точки
    if hull:
        hull.append(hull[0])  # Замыкаем оболочку
        hx = [p[0] for p in hull]
        hy = [p[1] for p in hull]
        plt.plot(hx, hy, color='red')  # Выпуклая оболочка
    plt.title("Выпуклая оболочка")
    plt.show()

# Визуализация вложенных треугольников
def plot_nested_triangles(points, triangles):
    plt.figure()
    x = [p[0] for p in points]
    y = [p[1] for p in points]
    plt.scatter(x, y, color='blue')  # Точки
    for triangle in triangles:
        triangle = list(triangle)  # Преобразуем кортеж в список
        triangle.append(triangle[0])  # Замыкаем треугольник
        tx = [p[0] for p in triangle]
        ty = [p[1] for p in triangle]
        plt.plot(tx, ty, color='green')  # Треугольник
    plt.title("Вложенные треугольники")
    plt.show()

# Проверка на вложенные треугольники
def has_nested_triangles(points):
    triangles = list(combinations(points, 3))
    nested = []
    for i in range(len(triangles)):
        for j in range(i + 1, len(triangles)):
            t1, t2 = triangles[i], triangles[j]
            if all(is_point_inside(p, *t2) for p in t1):
                nested.append((t1, t2))
            if all(is_point_inside(p, *t1) for p in t2):
                nested.append((t2, t1))
    return nested

# Основная программа
n = 6  # Количество точек
points = generate_random_points(n)
print("Сгенерированные точки:", points)

# Задача 1: Выпуклая оболочка
if len(points) < 3 or are_all_collinear(points):
    print("Выпуклая оболочка не существует")
else:
    hull = convex_hull(points)
    print("Выпуклая оболочка:", hull)
    plot_convex_hull(points, hull)

# Задача 2: Вложенные треугольники
nested_triangles = has_nested_triangles(points)
if nested_triangles:
    print("Найдены вложенные треугольники")
    for t1, t2 in nested_triangles:
        print("Треугольник 1:", t1)
        print("Треугольник 2:", t2)
    plot_nested_triangles(points, [t1 for t1, t2 in nested_triangles])
else:
    print("Вложенные треугольники не найдены")
